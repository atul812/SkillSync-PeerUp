
'use server';
/**
 * @fileOverview A conversational AI flow for the SkillSync & PeerUp chat bot.
 *
 * - getBotResponse - A function that handles generating a bot response.
 * - ChatBotInput - The input type for the getBotResponse function.
 * - ChatBotOutput - The return type for the getBotResponse function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ChatBotInputSchema = z.object({
  userInput: z.string().describe('The message sent by the user to the bot.'),
});
export type ChatBotInput = z.infer<typeof ChatBotInputSchema>;

const ChatBotOutputSchema = z.object({
  botResponse: z.string().describe('The response generated by the AI bot.'),
});
export type ChatBotOutput = z.infer<typeof ChatBotOutputSchema>;

export async function getBotResponse(input: ChatBotInput): Promise<ChatBotOutput> {
  return chatBotFlow(input);
}

const prompt = ai.definePrompt({
  name: 'chatBotPrompt',
  input: {schema: ChatBotInputSchema},
  output: {schema: ChatBotOutputSchema},
  prompt: `You are a friendly and helpful AI assistant for the SkillSync & PeerUp platform.
SkillSync & PeerUp is a peer-to-peer learning platform where students can teach skills they know and learn skills they need.
Your goal is to engage in a helpful and encouraging conversation with the user.
Keep your responses concise and relevant to a student learning platform context if possible.

User's message: {{{userInput}}}

Provide your response as 'botResponse'.
`,
});

const chatBotFlow = ai.defineFlow(
  {
    name: 'chatBotFlow',
    inputSchema: ChatBotInputSchema,
    outputSchema: ChatBotOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    if (!output) {
        // Fallback response if AI fails to generate structured output
        return { botResponse: "I'm sorry, I couldn't process that. Can you try rephrasing?" };
    }
    return output;
  }
);
